ltm node /Common/server01 {
    address 10.1.20.20
}
ltm node /Common/server02 {
    address 10.1.20.21
}
ltm node /Common/server03 {
    address 10.1.20.22
}
ltm node /Common/sip-transport.cc911.svc.cluster.local {
    address 10.240.2.245
}
ltm pool /Common/sip-servers {
    members {
        /Common/sip-transport.cc911.svc.cluster.local:5060 {
            address 10.240.2.245
        }
    }
}
ltm rule /Common/logging {
when RULE_INIT {
        set static::sip_emit_debug_logging yes
    }

    proc debug {msg} {
        if { !$static::sip_emit_debug_logging } { return }

        if { [clientside] } {
            set side "clientside"
        }
        else {
            set side "serverside"
        }

        if { [catch { SIP::method } sip_info] } {  ;# not a SIP message or not a SIP context
            set sip_info ""
        }
        else {
            if { $sip_info eq "" } {
                set sip_info [SIP::response code]
            }

            set sip_info "\[$sip_info\] "
        }

        log local0.debug "($side) (l=[IP::local_addr]:[TCP::local_port],r=[IP::remote_addr]:[TCP::remote_port]) $sip_info$msg"
    }
}
ltm rule /Common/sip-clientside-directed-flow {
when MR_INGRESS {
    log local0. "MR_INGRESS"

    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"
        if { [set callid [SIP::call_id]] ne "" } {
            if { [set nexthop [table lookup "$callid"]] ne "" } {
                call logging::debug "Nexthop on server directed flow found for Call-ID ($callid).  Sending message to nexthop ($nexthop)."
                if { [catch { MR::message nexthop $nexthop }] } {
                    call logging::debug "Nexthop assignment failed.  Dropping message."
                    MR::message drop "Serverside initiated nexthop failed."
                }
            }
            else {
                call logging::debug "No return flow identified for Call-ID ($callid).  Dropping message."
                MR::message drop "clientside directed message without return flow matching Call-ID"
            }
        }
        else {
            call logging::debug "No Call-ID found. Dropping message."
            MR::message drop "clientside directed message without Call-ID"
        }
    }
}
ltm rule /Common/sip-clientside-initiated-flow {
when RULE_INIT {
    set static::timeout_for_callid_entries 180
    set static::lifetime_for_callid_entries 600
}

when MR_INGRESS {
    log local0. "MR_INGRESS"

    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"
    if { [clientside] } {
        if { [set callid [SIP::call_id]] ne "" } {
            call logging::debug "Call-ID ($callid) found."

            if { [set nexthop_for_clientside_message [table lookup "cs-nh-$callid"]] ne "" } {
                call logging::debug "Found nexthop entry ($nexthop_for_clientside_message) for this Call-ID.  Following nexthop for this message."

                if { [catch { MR::message nexthop $nexthop_for_clientside_message }] } {
                    call logging::debug "Nexthop route failure. Dropping this message."
                    MR::message drop "No matching explicit nexthop"
                }
                else {
                    table lookup "ss-nh-$callid"  ;# touch the entry to ensure timeout is reset
                }
            }
            else {
                call logging::debug "No nexthop entry for this Call-ID.  Routing the message."

                call logging::debug "Setting reverse nexthop to ([MR::message lasthop]) for this Call-ID."
                table set "ss-nh-$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
            }
        }
        else {
            call logging::debug "No Call-ID found.  Routing the message."
        }

        MR::store callid nexthop_for_clientside_message

        MR::message route peer "/Common/peer-sip-servers"
    }
}

when MR_EGRESS {
    log local0. "MR_EGRESS"
    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"

    if { [serverside] } {
        MR::restore callid nexthop_for_clientside_message

        if { $callid ne "" and $nexthop_for_clientside_message eq "" } {
            set nexthop "[TMM::cmp_unit]:[MR::flow_id]"
            call logging::debug "Setting clientside nexthop for Call-ID ($callid) to ($nexthop)"
            table set "cs-nh-$callid" $nexthop $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
        }
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm rule /Common/sip-clientside-initiated-flow-udp {
when RULE_INIT {
    set static::timeout_for_callid_entries 180
    set static::lifetime_for_callid_entries 600
}

when MR_INGRESS {
    log local0. "MR_INGRESS"

    log local0. "[IP::remote_addr]:[UDP::remote_port] [SIP::method] [SIP::call_id]"
    if { [clientside] } {
        if { [set callid [SIP::call_id]] ne "" } {
            #call logging::debug "Call-ID ($callid) found."

            if { [set nexthop_for_clientside_message [table lookup "cs-nh-$callid"]] ne "" } {
                #call logging::debug "Found nexthop entry ($nexthop_for_clientside_message) for this Call-ID.  Following nexthop for this message."

                if { [catch { MR::message nexthop $nexthop_for_clientside_message }] } {
                    #call logging::debug "Nexthop route failure. Dropping this message."
                    MR::message drop "No matching explicit nexthop"
                }
                else {
                    table lookup "ss-nh-$callid"  ;# touch the entry to ensure timeout is reset
                }
            }
            else {
                #call logging::debug "No nexthop entry for this Call-ID.  Routing the message."

                #call logging::debug "Setting reverse nexthop to ([MR::message lasthop]) for this Call-ID."
                table set "ss-nh-$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
            }
        }
        else {
            #call logging::debug "No Call-ID found.  Routing the message."
        }

        MR::store callid nexthop_for_clientside_message

        MR::message route peer "/Common/peer-sip-servers"
    }
}

when MR_EGRESS {
    log local0. "MR_EGRESS"
    log local0. "[IP::remote_addr]:[UDP::remote_port] [SIP::method] [SIP::call_id]"

    if { [serverside] } {
        MR::restore callid nexthop_for_clientside_message

        if { $callid ne "" and $nexthop_for_clientside_message eq "" } {
            set nexthop "[TMM::cmp_unit]:[MR::flow_id]"
            #call logging::debug "Setting clientside nexthop for Call-ID ($callid) to ($nexthop)"
            table set "cs-nh-$callid" $nexthop $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
        }
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm rule /Common/sip-serverside-directed-flow {
when MR_INGRESS {
    log local0. "MR_INGRESS"

    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"
    if { [set callid [SIP::call_id]] ne "" } {
        if { [set nexthop [table lookup "ss-nh-$callid"]] ne "" } {
            call logging::debug "Nexthop on server directed flow found for Call-ID ($callid).  Sending message to nexthop ($nexthop)."
            if { [catch { MR::message nexthop $nexthop }] } {
                call logging::debug "Nexthop assignment failed.  Dropping message."
                MR::message drop "Serverside initiated nexthop failed."
            }
        }
    }
    else {
        call logging::debug "No Call-ID found.  Routing message."

        if { [clientside] } {
            set host [findstr [SIP::uri] "@" 1 ":"]
            log local0. "host: $host"

            set result [RESOLVER::name_lookup "/Common/azure" $host a]

            log local0. "2: [set ip [lindex [lindex [RESOLVER::summarize $result] 0] 4]]"

            call logging::debug "Received message for $ip%0:5060.  Routing."
            MR::message route config tc-serverside-initiated-flow host "$ip%0:5060"

            call logging::debug "Setting return_nexthop to [MR::message lasthop]."
            set return_nexthop [MR::message lasthop]

            MR::store return_nexthop

            if { [set callid [SIP::call_id]] ne "" } {
                call logging::debug "Call-ID ($callid) found."

                call logging::debug "Setting return hop for messages to clientside directed to [MR::message lasthop]."
                table set "$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
            }
            else {
                call logging::debug "No Call-ID found in this message."
            }
        }
        else {  ;# serverside
            call logging::debug "Received message from [IP::remote_addr]:[TCP::remote_port].  Returning to nexthop ($return_nexthop)."
            MR::message nexthop $return_nexthop
        }
    }
}

when MR_EGRESS {
    log local0. "MR_EGRESS"

    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"
    if { [serverside] } {
        MR::restore return_nexthop
    }
}
}
ltm rule /Common/sip-serverside-initiated-flow {
when MR_INGRESS {
    log local0. "MR_INGRESS"

    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"
        if { [clientside] } {
            call logging::debug "Received message for [IP::local_addr]%0:[TCP::local_port].  Routing."
            MR::message route config tc-serverside-initiated-flow host "[IP::local_addr]%0:[TCP::local_port]"

            call logging::debug "Setting return_nexthop to [MR::message lasthop]."
            set return_nexthop [MR::message lasthop]

            MR::store return_nexthop

            if { [set callid [SIP::call_id]] ne "" } {
                call logging::debug "Call-ID ($callid) found."

                call logging::debug "Setting return hop for messages to clientside directed to [MR::message lasthop]."
                table set "$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
            }
            else {
                call logging::debug "No Call-ID found in this message."
            }
        }
        else {  ;# serverside
            call logging::debug "Received message from [IP::remote_addr]:[TCP::remote_port].  Returning to nexthop ($return_nexthop)."
            MR::message nexthop $return_nexthop
        }
    }

    when MR_EGRESS {
        log local0. "MR_EGRESS"

    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"
        if { [serverside] } {
            MR::restore return_nexthop
        }
    }
}
ltm rule /Common/sip_dns_resolver {
when MR_INGRESS {
    log local0. "MR_INGRESS"

    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"
    if { [set callid [SIP::call_id]] ne "" } {
        if { [set nexthop [table lookup "ss-nh-$callid"]] ne "" } {
            call logging::debug "Nexthop on server directed flow found for Call-ID ($callid).  Sending message to nexthop ($nexthop)."
            if { [catch { MR::message nexthop $nexthop }] } {
                call logging::debug "Nexthop assignment failed.  Dropping message."
                MR::message drop "Serverside initiated nexthop failed."
            }
        } 
        else {
            call logging::debug "No Call-ID found.  Routing message."

            if { [clientside] } {
                set host [findstr [SIP::uri] "@" 1 ":"]

                if { $host ne "" } {
                    log local0. "host: $host"

                    set result [RESOLVER::name_lookup "/Common/azure" $host a]

                    log local0. "2: [set ip [lindex [lindex [RESOLVER::summarize $result] 0] 4]]"

                    if { $result eq "" } {
                        SIP::respond 500 "Unable to resolve name"
                        MR::message drop "unable to resolve name"
                        return
                    }

                    call logging::debug "Received message for $ip%0:5060.  Routing."
                    MR::message route config tc-serverside-initiated-flow host "$ip%0:5060"

                    call logging::debug "Setting return_nexthop to [MR::message lasthop]."
                    set return_nexthop [MR::message lasthop]

                    MR::store return_nexthop

                    if { [set callid [SIP::call_id]] ne "" } {
                        call logging::debug "Call-ID ($callid) found."

                        call logging::debug "Setting return hop for messages to clientside directed to [MR::message lasthop]."
                        table set "$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
                    }
                    else {
                        call logging::debug "No Call-ID found in this message."
                    }
                }
            }
            else {  ;# serverside
                call logging::debug "Received message from [IP::remote_addr]:[TCP::remote_port].  Returning to nexthop ($return_nexthop)."
                MR::message nexthop $return_nexthop
            }
        }
    }
}

when MR_EGRESS {
    log local0. "MR_EGRESS"

    log local0. "[IP::remote_addr]:[TCP::remote_port] [SIP::method] [SIP::call_id]"
    if { [serverside] } {
        MR::restore return_nexthop
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm virtual /Common/vs-clientside-directed-flow {
    creation-time 2020-07-20:23:29:09
    destination /Common/10.251.0.200:5060
    ip-protocol tcp
    last-modified-time 2020-10-31:00:58:05
    mask 255.255.255.255
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-serverside-initiated-flow { }
    }
    rules {
        /Common/sip-clientside-directed-flow
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/vs-clientside-initiated-flow {
    creation-time 2020-07-20:17:30:33
    destination /Common/10.251.0.100:5060
    ip-protocol tcp
    last-modified-time 2020-12-12:01:22:01
    mask 255.255.255.255
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-clientside-initiated-flow { }
    }
    rules {
        /Common/sip-clientside-initiated-flow
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/vs-clientside-initiated-flow-tls {
    creation-time 2020-07-20:17:30:33
    destination /Common/10.251.0.100:5061
    ip-protocol tcp
    last-modified-time 2021-01-28:10:51:32
    mask 255.255.255.255
    profiles {
        /Common/clientssl {
            context clientside
        }
        /Common/f5-tcp-progressive { }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-clientside-initiated-flow { }
    }
    rules {
        /Common/sip-clientside-initiated-flow
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/vs-clientside-initiated-flow-udp {
    destination /Common/10.251.0.100:5060
    ip-protocol udp
    mask 255.255.255.255
    profiles {
        /Common/router-server-initiated-flow { }
        /Common/sipsession-clientside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-clientside-initiated-flow-udp
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/vs-clientside-initiated-flow-udp-tls {
    destination /Common/10.251.0.100:5061
    ip-protocol udp
    last-modified-time 2021-01-28:10:51:44
    mask 255.255.255.255
    profiles {
        /Common/clientssl {
            context clientside
        }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-clientside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-clientside-initiated-flow-udp
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
}
ltm virtual /Common/vs-serverside-directed-flow {
    creation-time 2020-07-20:20:34:02
    destination /Common/10.251.0.4:5060
    ip-protocol tcp
    last-modified-time 2021-01-07:08:40:20
    mask 255.255.255.255
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-serverside-initiated-flow { }
    }
    rules {
        /Common/sip_dns_resolver
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
}
ltm virtual-address /Common/10.251.0.4 {
    address 10.251.0.4
    arp enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-local-only
}
ltm virtual-address /Common/10.251.0.100 {
    address 10.251.0.100
    arp enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm virtual-address /Common/10.251.0.200 {
    address 10.251.0.200
    arp enabled
    mask 255.255.255.255
    traffic-group /Common/traffic-group-1
}
ltm message-routing sip peer /Common/peer-sip-servers {
    connection-mode per-client
    number-connections 10000
    pool /Common/sip-servers
    transport-config /Common/tc-clientside-initiated-flow
}
ltm message-routing sip route /Common/to-peer-sip-servers {
    peers {
        /Common/peer-sip-servers
    }
}
ltm message-routing sip transport-config /Common/tc-clientside-initiated-flow {
    ip-protocol tcp
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/sipsession-clientside-initiated-flow { }
    }
    rules {
        /Common/sip-clientside-initiated-flow
    }
}
ltm message-routing sip transport-config /Common/tc-serverside-initiated-flow {
    ip-protocol tcp
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/sipsession-serverside-initiated-flow { }
    }
    rules {
        /Common/sip_dns_resolver
    }
}
ltm message-routing sip profile router /Common/router-clientside-initiated-flow {
    app-service none
    routes {
        /Common/to-peer-sip-servers
    }
    use-local-connection disabled
}
ltm message-routing sip profile router /Common/router-server-initiated-flow {
    app-service none
}
ltm message-routing sip profile session /Common/sipsession-clientside-initiated-flow {
    app-service none
    persistence {
        persist-key Call-ID
        persist-timeout 60
        persist-type none
    }
}
ltm message-routing sip profile session /Common/sipsession-serverside-initiated-flow {
    app-service none
    defaults-from /Common/sipsession
    insert-via-header disabled
    persistence {
        persist-key Call-ID
        persist-timeout 60
        persist-type session
    }
}
ltm monitor sip /Common/sip_monitor {
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    debug no
    defaults-from /Common/sip
    destination *:*
    interval 5
    mode tcp
    time-until-up 0
    timeout 16
}
net dns-resolver /Common/azure {
    forward-zones {
        . {
            nameservers {
                168.63.129.16:53 { }
            }
        }
    }
    route-domain /Common/0
    use-ipv6 no
    use-tcp no
}
