ltm pool /Common/sip-servers-tcp {
}
ltm pool /Common/sip-servers-udp {
}
ltm rule /Common/sip-clientside-directed-flow {
when MR_INGRESS {
    if { [set callid [SIP::call_id]] ne "" } {
        if { [set nexthop [table lookup "$callid"]] ne "" } {
            if { [catch { MR::message nexthop $nexthop }] } {
                MR::message drop "Serverside initiated nexthop failed."
            }
        }
        else {
            MR::message drop "clientside directed message without return flow matching Call-ID"
        }
    }
    else {
        MR::message drop "clientside directed message without Call-ID"
    }
}
}
ltm rule /Common/sip-clientside-initiated-flow {
when RULE_INIT {
    set static::timeout_for_callid_entries 180
    set static::lifetime_for_callid_entries 600
}

when MR_INGRESS {
    if { [clientside] } {
        if { [set callid [SIP::call_id]] ne "" } {
            if { [set nexthop_for_clientside_message [table lookup "cs-nh-$callid"]] ne "" } {
                if { [catch { MR::message nexthop $nexthop_for_clientside_message }] } {
                    MR::message drop "No matching explicit nexthop"
                }
                else {
                    table lookup "ss-nh-$callid"  ;# touch the entry to ensure timeout is reset
                }
            }
            else {
                table set "ss-nh-$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
            }
        }

        MR::store callid nexthop_for_clientside_message
        MR::message route peer "/Common/peer-sip-servers-tcp"
    }
}

when MR_EGRESS {
    if { [serverside] } {
        MR::restore callid nexthop_for_clientside_message

        if { $callid ne "" and $nexthop_for_clientside_message eq "" } {
            set nexthop "[TMM::cmp_unit]:[MR::flow_id]"
            table set "cs-nh-$callid" $nexthop $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
        }
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm rule /Common/sip-clientside-initiated-flow-udp {
when RULE_INIT {
    set static::timeout_for_callid_entries 180
    set static::lifetime_for_callid_entries 600
}

when MR_INGRESS {
    if { [clientside] } {
        if { [set callid [SIP::call_id]] ne "" } {
            if { [set nexthop_for_clientside_message [table lookup "cs-nh-$callid"]] ne "" } {
                if { [catch { MR::message nexthop $nexthop_for_clientside_message }] } {
                    MR::message drop "No matching explicit nexthop"
                }
                else {
                    table lookup "ss-nh-$callid"  ;# touch the entry to ensure timeout is reset
                }
            }
            else {
                table set "ss-nh-$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
            }
        }

        MR::store callid nexthop_for_clientside_message
        MR::message route peer "/Common/peer-sip-servers-udp"
    }
}

when MR_EGRESS {
    if { [serverside] } {
        MR::restore callid nexthop_for_clientside_message

        if { $callid ne "" and $nexthop_for_clientside_message eq "" } {
            set nexthop "[TMM::cmp_unit]:[MR::flow_id]"
            table set "cs-nh-$callid" $nexthop $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
        }
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm rule /Common/sip-dns-resolver {
when MR_INGRESS {
    if { [set callid [SIP::call_id]] ne "" } {
        if { [set nexthop [table lookup "ss-nh-$callid"]] ne "" } {
            if { [catch { MR::message nexthop $nexthop }] } {
                MR::message drop "Serverside initiated nexthop failed."
            }
        } 
        else {
            if { [clientside] } {
                set host [findstr [SIP::uri] "@" 1 ":"]

                if { $host ne "" } {
                    set result [RESOLVER::name_lookup "/Common/azure" $host a]
                    set ip [lindex [lindex [RESOLVER::summarize $result] 0] 4]

                    if { $ip eq "" } {
                        SIP::respond 500 "Unable to resolve name"
                        MR::message drop "unable to resolve name"
                        return
                    }

                    MR::message route config tc-serverside-initiated-flow host "$ip%0:5060"
                    set return_nexthop [MR::message lasthop]
                    MR::store return_nexthop

                    if { [set callid [SIP::call_id]] ne "" } {
                        table set "$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
                    }
                }
            }
            else {
                MR::message nexthop $return_nexthop
            }
        }
    }
}

when MR_EGRESS {
    if { [serverside] } {
        MR::restore return_nexthop
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm rule /Common/sip-dns-resolver-tls {
when MR_INGRESS {
    if { [set callid [SIP::call_id]] ne "" } {
        if { [set nexthop [table lookup "ss-nh-$callid"]] ne "" } {
            if { [catch { MR::message nexthop $nexthop }] } {
                MR::message drop "Serverside initiated nexthop failed."
            }
        } 
        else {
            if { [clientside] } {
                set host [findstr [SIP::uri] "@" 1 ":"]

                if { $host ne "" } {
                    set result [RESOLVER::name_lookup "/Common/azure" $host a]
                    set ip [lindex [lindex [RESOLVER::summarize $result] 0] 4]

                    if { $ip eq "" } {
                        SIP::respond 500 "Unable to resolve name"
                        MR::message drop "unable to resolve name"
                        return
                    }

                    MR::message route config tc-serverside-initiated-flow-tls host "$ip%0:5061"
                    set return_nexthop [MR::message lasthop]
                    MR::store return_nexthop

                    if { [set callid [SIP::call_id]] ne "" } {
                        table set "$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
                    }
                }
            }
            else {
                MR::message nexthop $return_nexthop
            }
        }
    }
}

when MR_EGRESS {
    if { [serverside] } {
        MR::restore return_nexthop
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm rule /Common/sip-dns-resolver-udp {
when MR_INGRESS {
    if { [set callid [SIP::call_id]] ne "" } {
        if { [set nexthop [table lookup "ss-nh-$callid"]] ne "" } {
            if { [catch { MR::message nexthop $nexthop }] } {
                MR::message drop "Serverside initiated nexthop failed."
            }
        } 
        else {
            if { [clientside] } {
                set host [findstr [SIP::uri] "@" 1 ":"]

                if { $host ne "" } {
                    set result [RESOLVER::name_lookup "/Common/azure" $host a]
                    set ip [lindex [lindex [RESOLVER::summarize $result] 0] 4]

                    if { $ip eq "" } {
                        SIP::respond 500 "Unable to resolve name"
                        MR::message drop "unable to resolve name"
                        return
                    }

                    MR::message route config tc-serverside-initiated-flow-udp host "$ip%0:5060"

                    set return_nexthop [MR::message lasthop]

                    MR::store return_nexthop

                    if { [set callid [SIP::call_id]] ne "" } {
                        table set "$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
                    }
                }
            }
            else {
                MR::message nexthop $return_nexthop
            }
        }
    }
}

when MR_EGRESS {
    if { [serverside] } {
        MR::restore return_nexthop
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm rule /Common/sip-dns-resolver-udp-tls {
when MR_INGRESS {
    if { [set callid [SIP::call_id]] ne "" } {
        if { [set nexthop [table lookup "ss-nh-$callid"]] ne "" } {
            if { [catch { MR::message nexthop $nexthop }] } {
                MR::message drop "Serverside initiated nexthop failed."
            }
        } 
        else {
            if { [clientside] } {
                set host [findstr [SIP::uri] "@" 1 ":"]

                if { $host ne "" } {
                    set result [RESOLVER::name_lookup "/Common/azure" $host a]
                    set ip [lindex [lindex [RESOLVER::summarize $result] 0] 4]

                    if { $ip eq "" } {
                        SIP::respond 500 "Unable to resolve name"
                        MR::message drop "unable to resolve name"
                        return
                    }

                    MR::message route config tc-serverside-initiated-flow-udp-tls host "$ip%0:5061"
                    set return_nexthop [MR::message lasthop]
                    MR::store return_nexthop

                    if { [set callid [SIP::call_id]] ne "" } {
                        table set "$callid" [MR::message lasthop] $static::timeout_for_callid_entries $static::lifetime_for_callid_entries
                    }
                }
            }
            else {
                MR::message nexthop $return_nexthop
            }
        }
    }
}

when MR_EGRESS {
    if { [serverside] } {
        MR::restore return_nexthop
    }
}

when MR_FAILED {
    log local0. "MR_FAILED: [MR::message status]"
}
}
ltm snatpool /Common/tcp-snat-pool {
    members {
        /Common/1.1.1.1
    }
}
ltm snatpool /Common/udp-snat-pool {
    members {
        /Common/1.1.1.2
    }
}
ltm virtual /Common/vs-clientside-initiated-flow {
    creation-time 2020-07-20:17:30:33
    destination /Common/1.251.0.100:5060
    ip-protocol tcp
    last-modified-time 2020-12-12:01:22:01
    mask 255.255.255.255
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-clientside-initiated-flow { }
    }
    rules {
        /Common/sip-clientside-initiated-flow
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/external
    }
    vlans-enabled
}
ltm virtual /Common/vs-clientside-initiated-flow-tls {
    creation-time 2020-07-20:17:30:33
    destination /Common/1.251.0.100:5061
    ip-protocol tcp
    last-modified-time 2021-01-28:10:51:32
    mask 255.255.255.255
    profiles {
        /Common/bigipAsClient {
            context clientside
        }
        /Common/f5-tcp-progressive { }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-clientside-initiated-flow { }
    }
    rules {
        /Common/sip-clientside-initiated-flow
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/external
    }
    vlans-enabled
}
ltm virtual /Common/vs-clientside-initiated-flow-udp {
    destination /Common/1.251.0.100:5060
    ip-protocol udp
    mask 255.255.255.255
    profiles {
        /Common/router-server-initiated-flow { }
        /Common/sipsession-clientside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-clientside-initiated-flow-udp
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/external
    }
    vlans-enabled
}
ltm virtual /Common/vs-clientside-initiated-flow-udp-tls {
    destination /Common/1.251.0.100:5061
    ip-protocol udp
    last-modified-time 2021-01-28:10:51:44
    mask 255.255.255.255
    profiles {
        /Common/bigipAsClient {
            context clientside
        }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-clientside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-clientside-initiated-flow-udp
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/external
    }
    vlans-enabled
}
ltm virtual /Common/vs-serverside-directed-flow {
    creation-time 2020-07-20:20:34:02
    destination /Common/1.251.0.4:5060
    ip-protocol tcp
    last-modified-time 2021-01-07:08:40:20
    mask 255.255.255.255
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-serverside-initiated-flow { }
    }
    rules {
        /Common/sip-dns-resolver
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/external
    }
    vlans-enabled
}
ltm virtual /Common/vs-serverside-directed-flow-tls {
    creation-time 2020-07-20:20:34:02
    destination /Common/1.251.0.4:5061
    ip-protocol tcp
    last-modified-time 2021-01-07:08:40:20
    mask 255.255.255.255
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/router-server-initiated-flow { }
        /Common/sipsession-serverside-initiated-flow { }
    }
    rules {
        /Common/sip-dns-resolver
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/external
    }
    vlans-enabled
}
ltm virtual /Common/vs-serverside-directed-flow-udp {
    creation-time 2020-07-20:20:34:02
    destination /Common/1.251.0.4:5060
    ip-protocol udp
    last-modified-time 2021-01-07:08:40:20
    mask 255.255.255.255
    profiles {
        /Common/router-server-initiated-flow { }
        /Common/sipsession-serverside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-dns-resolver
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/external
    }
    vlans-enabled
}
ltm virtual /Common/vs-serverside-directed-flow-udp-tls {
    creation-time 2020-07-20:20:34:02
    destination /Common/1.251.0.4:5061
    ip-protocol udp
    last-modified-time 2021-01-07:08:40:20
    mask 255.255.255.255
    profiles {
        /Common/router-server-initiated-flow { }
        /Common/sipsession-serverside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-dns-resolver
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    translate-address enabled
    translate-port enabled
    vlans {
        /Common/external
    }
    vlans-enabled
}
ltm message-routing sip peer /Common/peer-sip-servers-tcp {
    connection-mode per-client
    number-connections 10000
    pool /Common/sip-servers-tcp
    transport-config /Common/tc-clientside-initiated-flow
}
ltm message-routing sip peer /Common/peer-sip-servers-udp {
    connection-mode per-client
    number-connections 10000
    pool /Common/sip-servers-udp
    transport-config /Common/tc-clientside-initiated-flow-udp
}
ltm message-routing sip route /Common/to-peer-sip-servers-tcp {
    peers {
        /Common/peer-sip-servers-tcp
    }
}
ltm message-routing sip route /Common/to-peer-sip-servers-udp {
    peers {
        /Common/peer-sip-servers-udp
    }
}
ltm message-routing sip transport-config /Common/tc-clientside-initiated-flow {
    ip-protocol tcp
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/sipsession-clientside-initiated-flow { }
    }
    rules {
        /Common/sip-clientside-initiated-flow
    }
    source-address-translation {
        pool /Common/tcp-snat-pool
        type snat
    }
}
ltm message-routing sip transport-config /Common/tc-clientside-initiated-flow-udp {
    ip-protocol udp
    profiles {
        /Common/sipsession-clientside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-clientside-initiated-flow-udp
    }
    source-address-translation {
        pool /Common/udp-snat-pool
        type snat
    }
}
ltm message-routing sip transport-config /Common/tc-serverside-initiated-flow {
    ip-protocol tcp
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/sipsession-serverside-initiated-flow { }
    }
    rules {
        /Common/sip-dns-resolver
    }
}
ltm message-routing sip transport-config /Common/tc-serverside-initiated-flow-tls {
    ip-protocol tcp
    profiles {
        /Common/f5-tcp-progressive { }
        /Common/bigipAsClient { }
        /Common/sipsession-serverside-initiated-flow { }
    }
    rules {
        /Common/sip-dns-resolver-tls
    }
}
ltm message-routing sip transport-config /Common/tc-serverside-initiated-flow-udp {
    ip-protocol udp
    profiles {
        /Common/sipsession-serverside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-dns-resolver-udp
    }
}
ltm message-routing sip transport-config /Common/tc-serverside-initiated-flow-udp-tls {
    ip-protocol udp
    profiles {
        /Common/bigipAsClient { }
        /Common/sipsession-serverside-initiated-flow { }
        /Common/udp { }
    }
    rules {
        /Common/sip-dns-resolver-udp-tls
    }
}
ltm message-routing sip profile router /Common/router-clientside-initiated-flow {
    app-service none
    routes {
        /Common/to-peer-sip-servers-tcp
    }
    use-local-connection disabled
}
ltm message-routing sip profile router /Common/router-clientside-initiated-flow-udp {
    app-service none
    routes {
        /Common/to-peer-sip-servers-udp
    }
    use-local-connection disabled
}
ltm message-routing sip profile router /Common/router-server-initiated-flow {
    app-service none
}
ltm message-routing sip profile session /Common/sipsession-clientside-initiated-flow {
    app-service none
    persistence {
        persist-key Call-ID
        persist-timeout 60
        persist-type none
    }
}
ltm message-routing sip profile session /Common/sipsession-serverside-initiated-flow {
    app-service none
    defaults-from /Common/sipsession
    insert-via-header disabled
    persistence {
        persist-key Call-ID
        persist-timeout 60
        persist-type session
    }
}
ltm monitor sip /Common/sip_monitor {
    cipherlist DEFAULT:+SHA:+3DES:+kEDH
    compatibility enabled
    debug no
    defaults-from /Common/sip
    destination *:*
    interval 5
    mode tcp
    time-until-up 0
    timeout 16
}
ltm profile server-ssl /Common/bigipAsClient {
    app-service none
    ca-file /Common/serverCA
    cert /Common/bigipAsClient
    defaults-from /Common/serverssl
    key /Common/bigipAsClient
    peer-cert-mode require
}
ltm profile client-ssl /Common/bigipAsServer {
    app-service none
    ca-file /Common/clientCA
    cert-key-chain {
        bigipAsServer_0 {
            cert /Common/bigipAsServer
            key /Common/bigipAsServer
        }
    }
    client-cert-ca /Common/clientCA
    defaults-from /Common/clientssl
    inherit-ca-certkeychain true
    inherit-certkeychain false
    peer-cert-mode require
}
net dns-resolver /Common/azure {
    forward-zones {
        . {
            nameservers {
                168.63.129.16:53 { }
            }
        }
    }
    route-domain /Common/0
    use-ipv6 no
    use-tcp no
}
